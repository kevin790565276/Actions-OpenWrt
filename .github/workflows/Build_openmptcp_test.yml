name: openmptcprouter-test

on:
  release:
    types: [published] # 当发布版本时触发该工作流

  # 手动触发
  workflow_dispatch:

env:
  REPO_URL: 'https://github.com/ysurac/openmptcprouter'

jobs:
  build:
    strategy:
      matrix:
        OMR_TARGET: [x86, x86_64, r5s]
        OMR_KERNEL: [6.12]
    runs-on: ubuntu-22.04
    continue-on-error: true # 当发布版本时触发该工作流

    steps:
      - name: Prepare # 环境准备，安装编译工具
        run: |
          sudo apt-get update
          sudo apt-get install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler python3-pyelftools llvm clang

      - name: Free disk space
        run: |
          df -h
          sudo swapoff -a >/dev/null 2>&1 || true
          sudo rm -f /swapfile >/dev/null 2>&1 || true
          sudo apt-get autoremove -y >/dev/null 2>&1 || true
          sudo apt-get autoclean -y >/dev/null 2>&1 || true
          sudo rm -rf "/usr/local/share/boost" >/dev/null 2>&1 || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" >/dev/null 2>&1 || true
          sudo rm -rf /usr/share/dotnet >/dev/null 2>&1 || true
          sudo rm -rf /usr/local/lib/android >/dev/null 2>&1 || true
          sudo rm -rf /opt/ghc >/dev/null 2>&1 || true
          sudo docker rmi $(docker images -qf "dangling=true") >/dev/null 2>&1 || true
          df -h

      - name: Clone source code
        working-directory: ../../
        env:
          REPO_URL: https://github.com/ysurac/openmptcprouter
        run: |
          git clone $REPO_URL omr
          cd omr
          git checkout master
          git pull
          pwd

      - name: Build toolchain
        working-directory: ../../omr
        env:
          OMR_FEED_URL: https://github.com/ysurac/openmptcprouter-feeds
          OMR_TARGET: ${{ matrix.OMR_TARGET }}
          OMR_KERNEL: ${{ matrix.OMR_KERNEL }}
        run: |
          OMR_KERNEL="${OMR_KERNEL}" OMR_FEED_SRC="master" sh build.sh prepare {tools,toolchain}/install -j$(nproc) || OMR_KERNEL="${OMR_KERNEL}" OMR_FEED_SRC="master" sh build.sh prepare {tools,toolchain}/install -j1 V=s

      - name: Build packages
        working-directory: ../../omr
        env:
          OMR_TARGET: ${{ matrix.OMR_TARGET }}
          OMR_KERNEL: ${{ matrix.OMR_KERNEL }}
        run: |
          make IGNORE_ERRORS=m -C $OMR_TARGET/$OMR_KERNEL/source package/{compile,install,index} -j$(nproc) || make IGNORE_ERRORS=m -C $OMR_TARGET/$OMR_KERNEL/source package/{compile,install,index} -j1 V=s

      - name: Build image
        working-directory: ../../omr
        env:
          OMR_TARGET: ${{ matrix.OMR_TARGET }}
          OMR_KERNEL: ${{ matrix.OMR_KERNEL }}
        run: |
          make IGNORE_ERRORS=m -C $OMR_TARGET/$OMR_KERNEL/source target/install -j$(nproc) || make IGNORE_ERRORS=m -C $OMR_TARGET/$OMR_KERNEL/source target/install -j1 V=s

      - name: Upload artifacts # 使用 GitHub Actions 上传工件
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.OMR_TARGET }}
          path: /home/runner/work/omr/${{ matrix.OMR_TARGET }}/${{ matrix.OMR_KERNEL }}/source/bin
          overwrite: true

      - name: Upload binaries to GitHub Release # 上传到 GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: /home/runner/work/omr/${{ matrix.OMR_TARGET }}/${{ matrix.OMR_KERNEL }}/source/bin
          asset_name: ${{ matrix.OMR_TARGET }}-${{ matrix.OMR_KERNEL }}.tar.gz
          asset_content_type: application/gzip
